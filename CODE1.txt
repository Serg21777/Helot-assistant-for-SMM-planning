

import React, { useState } from 'react';
import Navigation from './components/Navigation';
import Dashboard from './pages/Dashboard';
import Planner from './pages/Planner';
import Settings from './pages/Settings';
import WalletModal from './components/WalletModal';
import './App.css';

function App() {
  const [activePage, setActivePage] = useState('planner');
  const [walletModalOpen, setWalletModalOpen] = useState(false);
  const [connected, setConnected] = useState(false);
  const [walletAddress, setWalletAddress] = useState('');
  const [subscription, setSubscription] = useState('free'); // free, basic, pro

  const openWalletModal = () => setWalletModalOpen(true);
  const closeWalletModal = () => setWalletModalOpen(false);

  const connectWallet = (address) => {
    setWalletAddress(address);
    setConnected(true);
    closeWalletModal();
  };

  const renderPage = () => {
    switch (activePage) {
      case 'dashboard':
        return <Dashboard subscription={subscription} />;
      case 'planner':
        return (
          <Planner 
            subscription={subscription} 
            connected={connected}
            openWalletModal={openWalletModal}
          />
        );
      case 'settings':
        return (
          <Settings 
            subscription={subscription}
            connected={connected}
            walletAddress={walletAddress}
            openWalletModal={openWalletModal}
          />
        );
      default:
        return <Planner />;
    }
  };

  return (
    <div className="App">
      <Navigation 
        activePage={activePage} 
        setActivePage={setActivePage}
        connected={connected}
        walletAddress={walletAddress}
        openWalletModal={openWalletModal}
      />
      
      <main className="main-content">
        {renderPage()}
      </main>

      <WalletModal 
        isOpen={walletModalOpen} 
        onClose={closeWalletModal}
        onConnect={connectWallet}
      />
    </div>
  );
}

export default App;

2. Navigation.js
import React from 'react';
import './Navigation.css';
import { SolanaLogo, DashboardIcon, PlannerIcon, SettingsIcon } from '../icons';

const Navigation = ({ activePage, setActivePage, connected, walletAddress, openWalletModal }) => {
  return (
    <nav className="navigation">
      <div className="navigation-logo">
        <SolanaLogo />
        <h1>SMM Planner AI</h1>
      </div>
      
      <div className="navigation-links">
        <button 
          className={`nav-link ${activePage === 'dashboard' ? 'active' : ''}`}
          onClick={() => setActivePage('dashboard')}
        >
          <DashboardIcon />
          <span>–î–∞—à–±–æ—Ä–¥</span>
        </button>
        
        <button 
          className={`nav-link ${activePage === 'planner' ? 'active' : ''}`}
          onClick={() => setActivePage('planner')}
        >
          <PlannerIcon />
          <span>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫</span>
        </button>
        
        <button 
          className={`nav-link ${activePage === 'settings' ? 'active' : ''}`}
          onClick={() => setActivePage('settings')}
        >
          <SettingsIcon />
          <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
        </button>
      </div>
      
      <div className="navigation-wallet">
        {connected ? (
          <div className="wallet-info">
            <div className="wallet-indicator connected"></div>
            <span className="wallet-address">
              {`${walletAddress.slice(0, 4)}...${walletAddress.slice(-4)}`}
            </span>
          </div>
        ) : (
          <button className="connect-wallet-button" onClick={openWalletModal}>
            –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
          </button>
        )}
      </div>
    </nav>
  );
};

export default Navigation;

3. WalletModal.js
import React, { useState } from 'react';
import './WalletModal.css';

const WalletModal = ({ isOpen, onClose, onConnect }) => {
  const [selectedWallet, setSelectedWallet] = useState(null);
  
  if (!isOpen) return null;
  
  const wallets = [
    { id: 'phantom', name: 'Phantom', icon: 'üëª' },
    { id: 'solflare', name: 'Solflare', icon: 'üîÜ' },
    { id: 'slope', name: 'Slope', icon: '‚õ∞Ô∏è' },
  ];
  
  const handleConnect = () => {
    if (!selectedWallet) return;
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    // –î–ª—è –¥–µ–º–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    const demoAddress = 'demo' + Math.random().toString(36).substring(2, 10);
    onConnect(demoAddress);
  };
  
  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h2>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫</h2>
          <button className="modal-close" onClick={onClose}>√ó</button>
        </div>
        
        <div className="modal-body">
          <p>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ Solana:</p>
          
          <div className="wallet-list">
            {wallets.map(wallet => (
              <div 
                key={wallet.id}
                className={`wallet-option ${selectedWallet === wallet.id ? 'selected' : ''}`}
                onClick={() => setSelectedWallet(wallet.id)}
              >
                <span className="wallet-icon">{wallet.icon}</span>
                <span className="wallet-name">{wallet.name}</span>
              </div>
            ))}
          </div>
        </div>
        
        <div className="modal-footer">
          <button 
            className="connect-button"
            disabled={!selectedWallet}
            onClick={handleConnect}
          >
            –ü–æ–¥–∫–ª—é—á–∏—Ç—å
          </button>
          <button className="cancel-button" onClick={onClose}>
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </div>
    </div>
  );
};

export default WalletModal;

4. Planner.js
import React, { useState, useEffect } from 'react';
import './Planner.css';

const Planner = ({ subscription, connected, openWalletModal }) => {
  const [platform, setPlatform] = useState('instagram');
  const [topic, setTopic] = useState('');
  const [audience, setAudience] = useState('general');
  const [contentType, setContentType] = useState('post');
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);

  const isPremiumFeature = (feature) => {
    const premiumFeatures = {
      'hashtag-research': ['basic', 'pro'],
      'competitor-analysis': ['pro'],
      'content-calendar': ['basic', 'pro'],
      'ai-caption': ['basic', 'pro'],
    };
    
    return !premiumFeatures[feature] || premiumFeatures[feature].includes(subscription);
  };

  const generateRecommendations = async () => {
    if (!connected && subscription === 'free') {
      // –ü–æ–∫–∞–∂–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–∂–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ
      setLoading(true);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
      setTimeout(() => {
        setResults({
          bestTime: '18:00 - 20:00',
          contentIdeas: [
            '–û–±–∑–æ—Ä –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
            '–ó–∞–∫—É–ª–∏—Å–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã',
            '–û–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ç–µ–º–µ'
          ],
          trending: ['#solana', '#web3', '#smm'],
          caption: subscription !== 'free' ? '–£–∑–Ω–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç! üöÄ #solana #web3' : null
        });
        setLoading(false);
      }, 1500);
    } else {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      setLoading(true);
      setTimeout(() => {
        setResults({
          bestTime: '18:00 - 20:00',
          contentIdeas: [
            '–û–±–∑–æ—Ä –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
            '–ó–∞–∫—É–ª–∏—Å–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã',
            '–û–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ç–µ–º–µ',
            '–ò–Ω—Ç–µ—Ä–≤—å—é —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –≤–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏',
            '–ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤'
          ],
          trending: ['#solana', '#web3', '#smm', '#crypto', '#blockchain', '#defi'],
          caption: '–£–∑–Ω–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç! üöÄ –ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –æ–±–∑–æ—Ä —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ Solana. –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–∞–º—ã–º–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º–∏! #solana #web3 #crypto #blockchain',
          competitors: subscription === 'pro' ? [
            { name: 'competitor1', engagement: '5.2%', postFrequency: '3 –≤ –¥–µ–Ω—å' },
            { name: 'competitor2', engagement: '4.8%', postFrequency: '2 –≤ –¥–µ–Ω—å' }
          ] : null
        });
        setLoading(false);
      }, 1500);
    }
  };

  return (
    <div className="planner-page">
      <h1>AI-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h1>
      
      <div className="planner-container">
        <div className="form-section">
          <h2>–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
          
          <div className="form-group">
            <label>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:</label>
            <select value={platform} onChange={(e) => setPlatform(e.target.value)}>
              <option value="instagram">Instagram</option>
              <option value="twitter">Twitter</option>
              <option value="facebook">Facebook</option>
              <option value="tiktok">TikTok</option>
              <option value="linkedin">LinkedIn</option>
            </select>
          </div>
          
          <div className="form-group">
            <label>–¢–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</label>
            <input 
              type="text" 
              value={topic} 
              onChange={(e) => setTopic(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –º–æ–¥–∞, –µ–¥–∞..."
            />
          </div>
          
          <div className="form-group">
            <label>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</label>
            <select value={audience} onChange={(e) => setAudience(e.target.value)}>
              <option value="general">–û–±—â–∞—è</option>
              <option value="tech">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã</option>
              <option value="business">–ë–∏–∑–Ω–µ—Å-–∞—É–¥–∏—Ç–æ—Ä–∏—è</option>
              <option value="creative">–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏</option>
            </select>
          </div>
          
          <div className="form-group">
            <label>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</label>
            <select value={contentType} onChange={(e) => setContentType(e.target.value)}>
              <option value="post">–ü–æ—Å—Ç</option>
              <option value="story">–ò—Å—Ç–æ—Ä–∏—è</option>
              <option value="reel">Reels/Shorts</option>
              <option value="carousel">–ö–∞—Ä—É—Å–µ–ª—å</option>
            </select>
          </div>
          
          <button 
            onClick={generateRecommendations} 
            disabled={loading || !topic}
            className="generate-btn"
          >
            {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'}
          </button>
        </div>
        
        {results && (
          <div className="results-section">
            <h2>–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
            
            <div className="result-card">
              <h3>–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</h3>
              <div className="time-recommendation">
                <div className="time-icon">‚è∞</div>
                <div className="time-details">
                  <p className="time-value">{results.bestTime}</p>
                  <p className="time-info">–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏</p>
                </div>
              </div>
            </div>
            
            <div className="result-card">
              <h3>–ò–¥–µ–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
              <ul className="content-ideas-list">
                {results.contentIdeas.map((idea, index) => (
                  <li key={index} className="content-idea-item">
                    <span className="idea-number">{index + 1}</span>
                    <span className="idea-text">{idea}</span>
                  </li>
                ))}
              </ul>
            </div>
            
            <div className="result-card">
              <h3>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏</h3>
              <div className="hashtags">
                {results.trending.map((tag, index) => (
                  <span key={index} className="hashtag">{tag}</span>
                ))}
              </div>
            </div>
            
            {results.caption && (
              <div className="result-card">
                <h3>AI-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</h3>
                <div className="caption-container">
                  <p>{results.caption}</p>
                  <button className="copy-button">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                </div>
              </div>
            )}
            
            {results.competitors && (
              <div className="result-card">
                <h3>–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</h3>
                <div className="competitors-table">
                  <div className="competitors-header">
                    <span>–ê–∫–∫–∞—É–Ω—Ç</span>
                    <span>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</span>
                    <span>–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å—Ç–æ–≤</span>
                  </div>
                  {results.competitors.map((competitor, index) => (
                    <div key={index} className="competitors-row">
                      <span>{competitor.name}</span>
                      <span>{competitor.engagement}</span>
                      <span>{competitor.postFrequency}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {subscription === 'free' && (
              <div className="subscription-banner">
                <div className="banner-icon">‚≠ê</div>
                <div className="banner-content">
                  <h3>–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å Premium</h3>
                  <p>–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π</p>
                  <button className="upgrade-button" onClick={openWalletModal}>
                    –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                  </button>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default Planner;
