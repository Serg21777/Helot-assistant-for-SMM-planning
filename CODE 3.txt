










import React, { useState, useEffect } from 'react';
import { Wallet, DollarSign, CreditCard, CheckCircle, AlertCircle, ChevronDown, ExternalLink, Sparkles, X } from 'lucide-react';

const SolanaWallet = () => {
  const [walletConnected, setWalletConnected] = useState(false);
  const [walletAddress, setWalletAddress] = useState('');
  const [walletBalance, setWalletBalance] = useState(0);
  const [subscription, setSubscription] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showPlans, setShowPlans] = useState(false);
  const [processingPayment, setProcessingPayment] = useState(false);
  const [transactionStatus, setTransactionStatus] = useState(null);

  // Данные о планах подписки
  const subscriptionPlans = [
    {
      id: 'basic',
      name: 'Базовый план',
      price: 0.05,
      features: [
        'Планирование до 10 постов',
        'Базовая AI-аналитика',
        'Поддержка 2-х платформ'
      ],
      recommended: false
    },
    {
      id: 'pro',
      name: 'Профессиональный план',
      price: 0.15,
      features: [
        'Неограниченное количество постов',
        'Расширенная AI-аналитика',
        'Поддержка всех платформ',
        'Расширенные рекомендации по контенту',
        'Приоритетная поддержка'
      ],
      recommended: true
    },
    {
      id: 'team',
      name: 'Командный план',
      price: 0.3,
      features: [
        'Все функции Pro-плана',
        'До 5 пользователей',
        'Совместное редактирование',
        'Аналитика по команде',
        'API доступ'
      ],
      recommended: false
    }
  ];

  useEffect(() => {
    const initWallet = async () => {
      setIsLoading(true);
      try {
        // Симуляция инициализации
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Проверяем наличие кошелька в браузере (в реальном приложении)
        // if (window.solana && window.solana.isPhantom) {
        //   const response = await window.solana.connect({ onlyIfTrusted: true });
        //   setWalletConnected(true);
        //   setWalletAddress(response.publicKey.toString());
        // }
        
        // Для демо версии оставляем отключенным
        setWalletConnected(false);
        
      } catch (error) {
        console.error('Ошибка при инициализации кошелька:', error);
        setTransactionStatus({ 
          type: 'error', 
          message: 'Ошибка при инициализации кошелька' 
        });
      } finally {
        setIsLoading(false);
      }
    };

    initWallet();
  }, []);

  const connectWallet = async () => {
    setIsLoading(true);
    setTransactionStatus(null);
    
    try {
      // В реальном приложении:
      // if (!window.solana) {
      //   throw new Error('Phantom кошелек не найден');
      // }
      // const response = await window.solana.connect();
      
      // Симуляция подключения
      await new Promise(resolve => setTimeout(resolve, 1200));
      
      setWalletConnected(true);
      setWalletAddress('8xG5KmT9nB7sC2pLvHq3zR4uF1dW6eN9mX8vY2zHv9A');
      setWalletBalance(2.75);
      
      setTransactionStatus({ 
        type: 'success', 
        message: 'Кошелек успешно подключен!' 
      });
      
    } catch (error) {
      console.error('Ошибка при подключении кошелька:', error);
      setTransactionStatus({ 
        type: 'error', 
        message: error.message || 'Ошибка при подключении кошелька' 
      });
    } finally {
      setIsLoading(false);
      setTimeout(() => setTransactionStatus(null), 3000);
    }
  };

  const disconnectWallet = async () => {
    setIsLoading(true);
    
    try {
      // В реальном приложении: await window.solana.disconnect();
      await new Promise(resolve => setTimeout(resolve, 800));
      
      setWalletConnected(false);
      setWalletAddress('');
      setWalletBalance(0);
      setSubscription(null);
      setShowPlans(false);
      
      setTransactionStatus({ 
        type: 'success', 
        message: 'Кошелек отключен' 
      });
      
    } catch (error) {
      console.error('Ошибка при отключении кошелька:', error);
      setTransactionStatus({ 
        type: 'error', 
        message: 'Ошибка при отключении кошелька' 
      });
    } finally {
      setIsLoading(false);
      setTimeout(() => setTransactionStatus(null), 2000);
    }
  };

  const subscribe = async (plan) => {
    if (walletBalance < plan.price) {
      setTransactionStatus({ 
        type: 'error', 
        message: 'Недостаточно средств на балансе' 
      });
      setTimeout(() => setTransactionStatus(null), 3000);
      return;
    }

    setProcessingPayment(true);
    setTransactionStatus({ type: 'processing', message: 'Обработка платежа...' });
    
    try {
      // Симуляция транзакции Solana
      await new Promise(resolve => setTimeout(resolve, 2500));
      
      // Случайная симуляция ошибки (10% вероятность)
      if (Math.random() < 0.1) {
        throw new Error('Транзакция отклонена сетью');
      }
      
      const subscriptionData = {
        id: `sub_${Date.now()}`,
        plan: plan.id,
        planName: plan.name,
        startDate: new Date().toISOString(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        price: plan.price,
        status: 'active',
        transactionHash: `tx_${Math.random().toString(36).substr(2, 9)}`
      };
      
      setSubscription(subscriptionData);
      setWalletBalance(prev => Math.max(0, prev - plan.price));
      setTransactionStatus({ 
        type: 'success', 
        message: `Подписка "${plan.name}" успешно оформлена!` 
      });
      setShowPlans(false);
      
    } catch (error) {
      console.error('Ошибка при оформлении подписки:', error);
      setTransactionStatus({ 
        type: 'error', 
        message: error.message || 'Ошибка при обработке платежа' 
      });
    } finally {
      setProcessingPayment(false);
      setTimeout(() => setTransactionStatus(null), 4000);
    }
  };

  const cancelSubscription = async () => {
    if (!subscription) return;
    
    setIsLoading(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      setSubscription(null);
      setTransactionStatus({ 
        type: 'success', 
        message: 'Подписка отменена' 
      });
    } catch (error) {
      setTransactionStatus({ 
        type: 'error', 
        message: 'Ошибка при отмене подписки' 
      });
    } finally {
      setIsLoading(false);
      setTimeout(() => setTransactionStatus(null), 3000);
    }
  };

  const formatAddress = (address) => {
    if (!address) return '';
    return `${address.slice(0, 4)}...${address.slice(-4)}`;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 p-4">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-xl shadow-xl p-8">
          <div className="flex items-center justify-between mb-8">
            <h1 className="text-3xl font-bold text-gray-800 flex items-center">
              <Wallet className="mr-3 text-purple-600" size={36} />
              Solana Кошелек
            </h1>
            {walletConnected && (
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                <span>Подключен</span>
              </div>
            )}
          </div>

          {isLoading ? (
            <div className="flex items-center justify-center py-16">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500"></div>
              <span className="ml-4 text-gray-600 text-lg">Загрузка...</span>
            </div>
          ) : !walletConnected ? (
            <div className="text-center py-16">
              <div className="mb-6">
                <Wallet size={80} className="mx-auto text-gray-300 mb-4" />
                <h2 className="text-2xl font-semibold text-gray-700 mb-2">
                  Подключите кошелек Solana
                </h2>
                <p className="text-gray-500 max-w-md mx-auto">
                  Для использования всех функций приложения необходимо подключить 
                  совместимый кошелек (Phantom, Solflare, etc.)
                </p>
              </div>
              <button
                onClick={connectWallet}
                disabled={isLoading}
                className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-4 rounded-xl font-semibold hover:from-purple-700 hover:to-blue-700 transition-all duration-200 transform hover:scale-105 flex items-center mx-auto shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
              >
                <Wallet className="mr-3" size={20} />
                Подключить кошелек
              </button>
            </div>
          ) : (
            <div className="space-y-8">
              {/* Информация о кошельке */}
              <div className="bg-gradient-to-r from-purple-100 to-blue-100 rounded-xl p-6 border border-purple-200">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <h3 className="font-semibold text-gray-800 mb-3 flex items-center">
                      <CreditCard className="mr-2" size={20} />
                      Подключенный кошелек
                    </h3>
                    <div className="space-y-2">
                      <p className="text-gray-600 font-mono text-sm bg-white px-3 py-1 rounded-lg inline-block">
                        {formatAddress(walletAddress)}
                      </p>
                      <div className="flex items-baseline space-x-2">
                        <span className="text-3xl font-bold text-gray-800">
                          {walletBalance.toFixed(3)}
                        </span>
                        <span className="text-lg text-gray-600 font-medium">SOL</span>
                        <span className="text-sm text-gray-500">
                          ≈ ${(walletBalance * 23.45).toFixed(2)} USD
                        </span>
                      </div>
                    </div>
                  </div>
                  <button
                    onClick={disconnectWallet}
                    className="text-gray-500 hover:text-red-500 transition-colors p-2 hover:bg-red-50 rounded-lg"
                    title="Отключить кошелек"
                  >
                    <X size={20} />
                  </button>
                </div>
              </div>

              {/* Статус подписки */}
              {subscription ? (
                <div className="bg-green-50 border border-green-200 rounded-xl p-6">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center">
                      <CheckCircle className="text-green-500 mr-3" size={24} />
                      <h3 className="font-semibold text-green-800">Активная подписка</h3>
                    </div>
                    <button
                      onClick={cancelSubscription}
                      className="text-sm text-red-600 hover:text-red-800 transition-colors"
                    >
                      Отменить
                    </button>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    <div>
                      <span className="text-gray-600 block mb-1">План:</span>
                      <p className="font-medium text-gray-800">{subscription.planName}</p>
                    </div>
                    <div>
                      <span className="text-gray-600 block mb-1">Действует до:</span>
                      <p className="font-medium text-gray-800">{formatDate(subscription.endDate)}</p>
                    </div>
                    <div>
                      <span className="text-gray-600 block mb-1">Стоимость:</span>
                      <p className="font-medium text-gray-800">{subscription.price} SOL/месяц</p>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="bg-amber-50 border border-amber-200 rounded-xl p-6">
                  <div className="flex items-center mb-4">
                    <AlertCircle className="text-amber-500 mr-3" size={24} />
                    <h3 className="font-semibold text-amber-800">Подписка не активна</h3>
                  </div>
                  <p className="text-amber-700 mb-4">
                    Выберите план подписки для доступа к расширенному функционалу AI-планировщика контента
                  </p>
                  <button
                    onClick={() => setShowPlans(true)}
                    className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"
                  >
                    <Sparkles className="mr-2" size={16} />
                    Выбрать план
                  </button>
                </div>
              )}

              {/* Планы подписки */}
              {showPlans && (
                <div className="space-y-6">
                  <div className="flex items-center justify-between">
                    <h3 className="text-2xl font-semibold text-gray-800">Выберите план подписки</h3>
                    <button
                      onClick={() => setShowPlans(false)}
                      className="text-gray-500 hover:text-gray-700 p-2 hover:bg-gray-100 rounded-lg transition-colors"
                    >
                      <X size={20} />
                    </button>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    {subscriptionPlans.map(plan => (
                      <div
                        key={plan.id}
                        className={`border rounded-xl p-6 relative transition-all duration-200 hover:shadow-lg ${
                          plan.recommended 
                            ? 'border-blue-500 bg-blue-50 shadow-md scale-105' 
                            : 'border-gray-200 bg-white hover:border-gray-300'
                        }`}
                      >
                        {plan.recommended && (
                          <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                            <span className="bg-gradient-to-r from-blue-500 to-purple-500 text-white px-4 py-1 rounded-full text-xs font-medium shadow-lg">
                              ⭐ Рекомендуем
                            </span>
                          </div>
                        )}
                        
                        <div className="text-center mb-6">
                          <h4 className="font-semibold text-xl mb-2 text-gray-800">{plan.name}</h4>
                          <div className="text-4xl font-bold text-gray-800 mb-1">
                            {plan.price}
                            <span className="text-lg font-normal text-gray-500 ml-1">SOL</span>
                          </div>
                          <p className="text-sm text-gray-500">в месяц</p>
                        </div>
                        
                        <ul className="space-y-3 mb-8">
                          {plan.features.map((feature, index) => (
                            <li key={index} className="flex items-start text-sm">
                              <CheckCircle size={16} className="text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                              <span className="text-gray-700">{feature}</span>
                            </li>
                          ))}
                        </ul>
                        
                        <button
                          onClick={() => subscribe(plan)}
                          disabled={processingPayment || walletBalance < plan.price}
                          className={`w-full py-3 px-4 rounded-lg font-medium transition-all duration-200 ${
                            plan.recommended
                              ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white hover:from-blue-600 hover:to-purple-600 shadow-lg'
                              : 'bg-gray-800 text-white hover:bg-gray-700'
                          } disabled:bg-gray-300 disabled:cursor-not-allowed disabled:shadow-none transform hover:scale-105 disabled:transform-none`}
                        >
                          {processingPayment ? (
                            <div className="flex items-center justify-center">
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                              Обработка...
                            </div>
                          ) : walletBalance < plan.price ? (
                            'Недостаточно средств'
                          ) : (
                            'Выбрать план'
                          )}
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Статус транзакции */}
          {transactionStatus && (
            <div className={`fixed bottom-6 right-6 max-w-md border rounded-xl p-4 shadow-lg transition-all duration-300 ${
              transactionStatus.type === 'success' ? 'bg-green-50 border-green-200' :
              transactionStatus.type === 'error' ? 'bg-red-50 border-red-200' :
              'bg-blue-50 border-blue-200'
            }`}>
              <div className="flex items-center">
                {transactionStatus.type === 'success' && <CheckCircle className="text-green-500 mr-3 flex-shrink-0" size={20} />}
                {transactionStatus.type === 'error' && <AlertCircle className="text-red-500 mr-3 flex-shrink-0" size={20} />}
                {transactionStatus.type === 'processing' && 
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500 mr-3 flex-shrink-0"></div>
                }
                <span className={`font-medium ${
                  transactionStatus.type === 'success' ? 'text-green-800' :
                  transactionStatus.type === 'error' ? 'text-red-800' :
                  'text-blue-800'
                }`}>
                  {transactionStatus.message}
                </span>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default SolanaWallet;